pipeline {
    agent any

    environment {
        PODMAN_CMD = 'sudo -u podman podman'
        REPO_NAME = "StabilityMatrix"
        AUTHOR = "yansigit"
        CONTAINER_IMAGE = "mcr.microsoft.com/dotnet/sdk:8.0"
        CONTAINER_ARGS = '--rm -v ${WORKSPACE}:/app -w /app -e HUSKY=0'
        DOTNET_ARGS = '/p:DebugType=None /nodeReuse:false /maxcpucount:1'
    }

    parameters {
        booleanParam(defaultValue: false, name: 'SKIP_CLEANUP', description: '')
        booleanParam(defaultValue: false, name: 'SKIP_CHECKOUT', description: '')
        booleanParam(defaultValue: false, name: 'SKIP_IMAGE_PULL', description: '')
        booleanParam(defaultValue: false , name: 'SKIP_DOTNET_TEST', description: '')
        booleanParam(defaultValue: true, name: 'SKIP_LINUX_PUBLISH', description: '')
        booleanParam(defaultValue: false, name: 'SKIP_REMOVE_IMAGE', description: '')
    }

    stages {
        stage('Clean') {
            when {
                expression { !params.SKIP_CLEANUP }
            }
            steps {
                deleteDir()
            }
        }

        stage('Checkout') {
            when {
                expression { !params.SKIP_CHECKOUT }
            }
            steps {
                git branch: env.BRANCH_NAME, 
                    credentialsId: 'jenkins-github-token', 
                    url: "https://github.com/${env.AUTHOR}/${env.REPO_NAME}.git"
            }
        }
        
        stage('Setup Container') {
            when {
                expression { !params.SKIP_IMAGE_PULL }
            }
            steps {
                sh "${env.PODMAN_CMD} pull ${env.CONTAINER_IMAGE}"
                sh "${env.PODMAN_CMD} image prune -f"
            }
        }
        
        stage('Test') {
            when {
                expression { !params.SKIP_DOTNET_TEST }
            }
            steps {
                sh """
                    ${PODMAN_CMD} run ${CONTAINER_ARGS} \
                    ${CONTAINER_IMAGE} \
                    dotnet test StabilityMatrix.Tests \
                    ${DOTNET_ARGS}
                """            }
        }

        stage('Main Branch Tasks') {
            when {
                branch 'develop'
            }
            stages {
                stage('Set Version') {
                    steps {
                        script {
                            if (env.TAG_NAME) {
                                env.VERSION = env.TAG_NAME.replaceFirst(/^v/, '')
                            } else {
                                env.VERSION = VersionNumber(
                                    projectStartDate: '2023-06-21', 
                                    versionNumberString: '${BUILDS_ALL_TIME}', 
                                    worstResultForIncrement: 'SUCCESS'
                                )
                            }
                        }
                    }
                }
                
                stage('Publish Windows') {
                    steps {
                        sh """
                            ${env.PODMAN_CMD} run ${CONTAINER_ARGS} ${env.CONTAINER_IMAGE} \
                            dotnet publish ./StabilityMatrix.Avalonia/StabilityMatrix.Avalonia.csproj \
                            -c Release -o out -r win-x64 -p:PublishSingleFile=true \
                            -p:VersionPrefix=2.0.0 -p:VersionSuffix=${env.VERSION} \
                            -p:IncludeNativeLibrariesForSelfExtract=true ${DOTNET_ARGS}
                        """
                    }
                }

                stage('Publish Linux') {
                    when {
                        expression { !params.SKIP_LINUX_PUBLISH }
                    }
                    steps {
                        sh "${env.PODMAN_CMD} run ${CONTAINER_ARGS} ${env.CONTAINER_IMAGE} rm -rf StabilityMatrix.Avalonia/bin/*"
                        sh "${env.PODMAN_CMD} run ${CONTAINER_ARGS} ${env.CONTAINER_IMAGE} rm -rf StabilityMatrix.Avalonia/obj/*"
                        sh """
                            ${env.PODMAN_CMD} run ${CONTAINER_ARGS} ${env.CONTAINER_IMAGE} \
                            dotnet tool install -g KuiperZone.PupNet && \
                            pupnet --runtime linux-x64 --kind appimage --app-version ${env.VERSION} --clean -y
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                if (!params.SKIP_CLEANUP) {
                    def dirsToDelete = [
                        'Avalonia.Gif/bin/*',
                        'Avalonia.Gif/obj/*',
                        'StabilityMatrix.Core/bin/*',
                        'StabilityMatrix.Core/obj/*',
                        'StabilityMatrix.Native/bin/*',
                        'StabilityMatrix.Native/obj/*',
                        'StabilityMatrix.Native.Abstractions/bin/*',
                        'StabilityMatrix.Native.Abstractions/obj/*',
                        'StabilityMatrix.Native.Windows/bin/*',
                        'StabilityMatrix.Native.Windows/obj/*',
                        'StabilityMatrix.Avalonia/bin/*',
                        'StabilityMatrix.Avalonia/obj/*',
                        '.dotnet'
                    ]
                    dirsToDelete.each { dir ->
                        sh "${env.PODMAN_CMD} run ${CONTAINER_ARGS} ${env.CONTAINER_IMAGE} rm -rf ${dir}"
                    }
                    sh "${env.PODMAN_CMD} run ${CONTAINER_ARGS} ${env.CONTAINER_IMAGE} sh -c '[ -d out ] && chown 993:993 -R out || echo \"out directory does not exist\"'"
                    cleanWs()
                }
                if (!params.SKIP_REMOVE_IMAGE) {
                    sh "${env.PODMAN_CMD} rmi ${env.CONTAINER_IMAGE}"
                }
                sh "${env.PODMAN_CMD} system prune -f"
            }
        }
    }
}
